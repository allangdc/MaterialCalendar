{"version":3,"sources":["components/calendar/index.tsx","components/calendar/style.ts","components/calendar/cells/MonthlyCells.tsx","components/calendar/cells/YearlyCells.tsx","components/calendar/cells/index.tsx","components/calendar/header/control.tsx","components/calendar/header/ToggleCalendarFormat.tsx","components/calendar/header/index.tsx","components/calendar/table2/TabData.tsx","components/calendar/table2/TabHeader.tsx","components/calendar/table2/index.tsx","components/calendar/monthly.tsx","components/calendar/yearly.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CalendarFormat","useStyles","makeStyles","headercell","border","borderWidth","minHeight","cell","height","header_back_button","display","justifyContent","header_foward_button","table_cell","verticalAlign","table","width","borderCollapse","MonthlyCells","props","children","day","useContext","CalendarContext","currDate","holidays","holidayColor","useState","myHoly","setMyHoly","useEffect","holy","find","dayHoly","isSameDay","yearly","tempHoly","Date","setFullYear","getFullYear","HolidayInfo","style","position","Typography","align","variant","paddingLeft","paddingRight","title","Grid","container","id","backgroundColor","isToday","getDay","item","xs","padding","color","getMonth","getDate","YearlyCells","currentDate","startOfToday","isSameMonth","colorCells","Cells","formatCal","lineColor","classes","GenericCells","MONTHLY","className","borderColor","Control","setCurrDate","headerTitle","setHeaderTitle","_","format","locale","pt","toString","IconButton","size","onClick","subMonths","subYears","addMonths","addYears","ToggleCalendarFormat","setFormatCal","alignItems","ToggleButtonGroup","value","onChange","event","newFormat","exclusive","ToggleButton","YEARLY","TodayButton","Button","NormalHeader","MobileHeader","Header","spacing","TabData","header","data","sameWidthP100","NCol","length","Array","from","keys","lineKey","setLineKey","col","map","i","filter","index","TabHeader","MyTable","TableCalendar2","Monthly","headerArray","dataArray","Yearly","initialContext","undefined","language","setDataArray","setHeaderArray","createContext","Calendar","borderLineColor","ref","useRef","setWidth","setSameWidthP100","calendarContext","ncol","wdt","Math","round","handleResize","current","clientWidth","window","addEventListener","getDays","getMonths","getWeekName","getMonthName","initCal","startOfDay","startOfWeek","startOfMonth","endCal","endOfWeek","endOfMonth","differenceInDays","push","addDays","darray","ultraShortWeekname","toLocaleDateString","weekday","slice","shortWeekname","longWeekname","split","capitalize","harray","startOfYear","endOfYear","differenceInMonths","shortMonthName","longMonthName","ultraShortMonthName","monthsArray","GenericCalendar","Provider","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60616728.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-empty-function */\nimport { Grid, Typography } from \"@mui/material\";\nimport {\n  addDays,\n  addMonths,\n  differenceInDays,\n  differenceInMonths,\n  endOfMonth,\n  endOfWeek,\n  endOfYear,\n  format,\n  startOfDay,\n  startOfToday,\n  startOfWeek,\n  startOfYear,\n} from \"date-fns\";\nimport { pt } from \"date-fns/locale\";\nimport startOfMonth from \"date-fns/startOfMonth\";\nimport _ from \"lodash\";\nimport React, {\n  createContext,\n  ReactNode,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport Cells from \"./cells\";\nimport Header from \"./header\";\nimport Monthly from \"./monthly\";\nimport Yearly from \"./yearly\";\n\nexport enum CalendarFormat {\n  MONTHLY,\n  YEARLY,\n}\n\nexport interface ICalendarContext {\n  currDate: Date;\n  setCurrDate: React.Dispatch<React.SetStateAction<Date>>;\n  width: number | undefined;\n  setFormatCal: React.Dispatch<React.SetStateAction<CalendarFormat>>;\n  formatCal: CalendarFormat;\n  language: string;\n  holidays: Array<CalendarHoliday> | undefined;\n  holidayColor: string | undefined;\n  lineColor: string | undefined;\n  dataArray: Array<ReactNode>;\n  setDataArray: React.Dispatch<React.SetStateAction<React.ReactNode[]>>;\n  headerArray: Array<ReactNode>;\n  setHeaderArray: React.Dispatch<React.SetStateAction<React.ReactNode[]>>;\n  sameWidthP100: string | undefined;\n}\n\nconst initialContext: ICalendarContext = {\n  currDate: startOfToday(),\n  setCurrDate: () => {},\n  width: undefined,\n  setFormatCal: () => {},\n  formatCal: CalendarFormat.MONTHLY,\n  language: \"\",\n  holidays: undefined,\n  holidayColor: undefined,\n  lineColor: undefined,\n  dataArray: [],\n  setDataArray: () => {},\n  headerArray: [],\n  setHeaderArray: () => {},\n  sameWidthP100: undefined,\n};\n\nexport interface CalendarHoliday {\n  title: string;\n  day: Date;\n  yearly: boolean;\n}\n\nexport const CalendarContext = createContext<ICalendarContext>(initialContext);\n\ninterface Props {\n  id?: string;\n  language: string;\n  holidays?: Array<CalendarHoliday>;\n  holidayColor?: string;\n  borderLineColor?: string;\n}\n\nconst Calendar: React.FC<Props> = (props: Props) => {\n  const { id, language, holidays, holidayColor, borderLineColor } = props;\n  const ref = useRef<HTMLDivElement>(null);\n  const [currDate, setCurrDate] = useState<Date>(startOfToday());\n  const [width, setWidth] = useState<number | undefined>(undefined);\n  const [formatCal, setFormatCal] = useState<CalendarFormat>(\n    CalendarFormat.MONTHLY\n  );\n  const [dataArray, setDataArray] = useState<Array<ReactNode>>([]);\n  const [headerArray, setHeaderArray] = useState<Array<ReactNode>>([]);\n  const [sameWidthP100, setSameWidthP100] = useState<string>(\"100%\");\n\n  const calendarContext: ICalendarContext = {\n    currDate,\n    setCurrDate,\n    width,\n    setFormatCal,\n    formatCal,\n    language,\n    holidays,\n    holidayColor,\n    lineColor: borderLineColor || \"rgb(223 223 222)\",\n    dataArray,\n    setDataArray,\n    headerArray,\n    setHeaderArray,\n    sameWidthP100,\n  };\n\n  const NCol = () => headerArray.length;\n\n  useEffect(() => {\n    // eslint-disable-next-line new-cap\n    const ncol = NCol();\n    if (ncol > 0) {\n      const wdt = `${Math.round(100 / ncol)}%`;\n      setSameWidthP100(wdt);\n    }\n  }, [headerArray.length, formatCal, currDate]);\n\n  const handleResize = () => {\n    setWidth(ref.current?.clientWidth);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize, false);\n    handleResize();\n  });\n\n  useEffect(() => {\n    if (formatCal === CalendarFormat.MONTHLY) {\n      getDays();\n    } else {\n      getMonths();\n    }\n  }, [currDate, width, formatCal]);\n\n  useEffect(() => {\n    if (formatCal === CalendarFormat.MONTHLY) {\n      getWeekName();\n    } else {\n      getMonthName();\n    }\n  }, [width, formatCal]);\n\n  const getDays = (): void => {\n    const data = new Array<Date>();\n    const initCal = startOfDay(startOfWeek(startOfMonth(currDate)));\n    const endCal = startOfDay(endOfWeek(endOfMonth(currDate)));\n\n    let i: Date = initCal;\n    while (differenceInDays(i, endCal) <= 0) {\n      data.push(i);\n      i = addDays(i, 1);\n    }\n    const darray = data.map((item, index) => (\n      <Cells key={`cells_dt_${index}`} day={item} />\n    ));\n    if (darray.length > 0) setDataArray(darray);\n  };\n\n  const getWeekName = (): void => {\n    const data = new Array<string>();\n    const initCal = startOfDay(startOfWeek(currDate));\n    const endCal = startOfDay(endOfWeek(initCal));\n\n    let i: Date = initCal;\n    while (differenceInDays(i, endCal) <= 0) {\n      const ultraShortWeekname = i\n        .toLocaleDateString(language, {\n          weekday: \"short\",\n        })\n        .slice(0, 1);\n      const shortWeekname = i\n        .toLocaleDateString(language, {\n          weekday: \"short\",\n        })\n        .slice(0, 3);\n      const longWeekname = i\n        .toLocaleDateString(language, {\n          weekday: \"long\",\n        })\n        .split(\"-\")[0];\n      if (width && width > 500) {\n        data.push(_.capitalize(longWeekname));\n      } else if (width && width > 270) {\n        data.push(_.capitalize(shortWeekname));\n      } else {\n        data.push(_.capitalize(ultraShortWeekname));\n      }\n      i = addDays(i, 1);\n    }\n\n    const harray = data.map((item, index) => (\n      <Typography key={`typo_harray_${index}`} align=\"center\">\n        {item}\n      </Typography>\n    ));\n\n    if (harray.length > 0) setHeaderArray(harray);\n  };\n\n  const getMonths = (): void => {\n    const data = new Array<Date>();\n    const initCal = startOfDay(startOfYear(currDate));\n    const endCal = startOfDay(startOfMonth(endOfYear(initCal)));\n\n    let i: Date = initCal;\n    while (differenceInMonths(i, endCal) <= 0) {\n      data.push(i);\n      i = addMonths(i, 1);\n    }\n\n    const darray = data.map((item, index) => (\n      <Cells key={`cells_dtmon_${index}`} day={item} />\n    ));\n\n    if (darray.length > 0) setDataArray(darray);\n  };\n\n  const getMonthName = () => {\n    const data = new Array<string>();\n    const initCal = startOfDay(startOfYear(currDate));\n    const endCal = startOfDay(startOfMonth(endOfYear(initCal)));\n\n    let i: Date = initCal;\n    while (differenceInMonths(i, endCal) <= 0) {\n      const shortMonthName = _.capitalize(format(i, \"MMM\", { locale: pt }));\n      const longMonthName = _.capitalize(format(i, \"MMMM\", { locale: pt }));\n      const ultraShortMonthName = _.capitalize(\n        format(i, \"MMMMM\", { locale: pt })\n      );\n      if (width && width > 970) {\n        data.push(longMonthName);\n      } else if (width && width > 470) {\n        data.push(shortMonthName);\n      } else {\n        data.push(ultraShortMonthName);\n      }\n      i = addMonths(i, 1);\n    }\n\n    const monthsArray = data.map((item, index) => (\n      <Typography key={`typo_month_a${index}`} align=\"center\">\n        {item}\n      </Typography>\n    ));\n\n    if (monthsArray) setHeaderArray(monthsArray);\n  };\n\n  const GenericCalendar: React.FC = () => (\n    <>\n      {formatCal === CalendarFormat.MONTHLY && <Monthly />}\n      {formatCal === CalendarFormat.YEARLY && <Yearly />}\n    </>\n  );\n\n  return (\n    <CalendarContext.Provider value={calendarContext}>\n      <Grid container spacing={1} id={id} ref={ref}>\n        <Grid item xs={12}>\n          <Header data-testid=\"calendar-header\" />\n        </Grid>\n        <Grid item xs={12}>\n          {width}\n        </Grid>\n        <Grid item xs={12}>\n          <GenericCalendar />\n        </Grid>\n      </Grid>\n    </CalendarContext.Provider>\n  );\n};\n\nexport default Calendar;\n","import { makeStyles } from \"@material-ui/styles\";\n\nexport const useStyles = makeStyles({\n  headercell: {\n    border: \"solid\",\n    borderWidth: 1,\n    minHeight: 24,\n  },\n  cell: {\n    height: \"100%\",\n  },\n  header_back_button: {\n    display: \"flex\",\n    justifyContent: \"end\",\n  },\n  header_foward_button: {\n    display: \"flex\",\n    justifyContent: \"start\",\n  },\n  table_cell: {\n    verticalAlign: \"top\",\n    border: \"solid 1px lightgrey\",\n  },\n  table: {\n    width: \"100%\",\n    height: \"100%\",\n    borderCollapse: \"collapse\",\n  },\n});\n","import React, { ReactNode, useContext, useEffect, useState } from \"react\";\nimport { Grid, Typography } from \"@mui/material\";\nimport { isSameDay, isToday } from \"date-fns\";\nimport { CalendarContext, CalendarHoliday } from \"..\";\n\ninterface Props {\n  id?: string;\n  children?: ReactNode;\n  day: Date;\n}\n\nconst MonthlyCells: React.FC<Props> = (props: Props) => {\n  const { children, day } = props;\n  const { currDate, holidays, holidayColor } = useContext(CalendarContext);\n  const [myHoly, setMyHoly] = useState<CalendarHoliday>();\n\n  useEffect(() => {\n    const holy = holidays?.find((dayHoly) => {\n      if (isSameDay(dayHoly.day, day)) {\n        return true;\n      }\n      if (dayHoly.yearly) {\n        const tempHoly = new Date(dayHoly.day);\n        tempHoly.setFullYear(day.getFullYear());\n        if (isSameDay(tempHoly, day)) {\n          return true;\n        }\n      }\n      return false;\n    });\n    setMyHoly(holy);\n  }, [holidays, day]);\n\n  const colorCells = (): string | undefined => {\n    if (isToday(day)) {\n      return \"#F8AD63\";\n    }\n    if (myHoly) {\n      return holidayColor || \"#FECEF1\";\n    }\n    if (day.getDay() === 0 || day.getDay() === 6) {\n      return \"#F7F6F3\";\n    }\n    return undefined;\n  };\n\n  const colorText = (): string | undefined => {\n    if (day.getMonth() !== currDate.getMonth()) {\n      return \"ThreeDHighlight\";\n    }\n    return \"gray\";\n  };\n\n  const HolidayInfo: React.FC = () => {\n    return (\n      <div style={{ position: \"relative\" }}>\n        <Typography\n          align=\"center\"\n          variant=\"subtitle2\"\n          style={{\n            paddingLeft: 10,\n            paddingRight: 10,\n          }}\n        >\n          {myHoly?.title}\n        </Typography>\n        <Typography\n          align=\"center\"\n          variant=\"subtitle2\"\n          style={{\n            paddingLeft: 10,\n            paddingRight: 10,\n          }}\n        >\n          {myHoly?.title}\n        </Typography>\n        <Typography\n          align=\"center\"\n          variant=\"subtitle2\"\n          style={{\n            paddingLeft: 10,\n            paddingRight: 10,\n          }}\n        >\n          {myHoly?.title}\n        </Typography>\n      </div>\n    );\n  };\n\n  return (\n    <Grid\n      container\n      data-testid=\"MonthlyView\"\n      id=\"popim\"\n      style={{\n        backgroundColor: colorCells(),\n        height: \"100%\",\n        minHeight: 50,\n      }}\n    >\n      <Grid item xs={12}>\n        <Typography\n          variant=\"subtitle2\"\n          align=\"right\"\n          style={{ padding: 5, color: colorText() }}\n        >\n          {day.getDate()}\n        </Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <HolidayInfo />\n      </Grid>\n      <Grid item xs={12}>\n        {children}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default MonthlyCells;\n","import React, { ReactNode } from \"react\";\nimport { Grid } from \"@mui/material\";\nimport { isSameMonth, startOfToday } from \"date-fns\";\n\ninterface Props {\n  id?: string;\n  children?: ReactNode;\n  day: Date;\n}\n\nconst YearlyCells: React.FC<Props> = (props: Props) => {\n  const { children, day } = props;\n  const currentDate = startOfToday();\n\n  const colorCells = (): string | undefined => {\n    if (isSameMonth(day, currentDate)) {\n      return \"#F8AD63\";\n    }\n    return undefined;\n  };\n\n  return (\n    <Grid\n      container\n      data-testid=\"YearlyView\"\n      style={{ backgroundColor: colorCells(), minHeight: 50 }}\n    >\n      <Grid item xs={12}>\n        {children}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default YearlyCells;\n","import React, { ReactNode, useContext } from \"react\";\nimport { CalendarContext, CalendarFormat } from \"..\";\nimport { useStyles } from \"../style\";\nimport MonthlyCells from \"./MonthlyCells\";\nimport YearlyCells from \"./YearlyCells\";\n\ninterface Props {\n  id?: string;\n  children?: ReactNode;\n  day: Date;\n}\n\nconst Cells: React.FC<Props> = (props: Props) => {\n  const { children, day } = props;\n  const { formatCal, lineColor } = useContext(CalendarContext);\n  const classes = useStyles();\n\n  const GenericCells: React.FC = () => {\n    if (formatCal === CalendarFormat.MONTHLY) {\n      return <MonthlyCells day={day}>{children}</MonthlyCells>;\n    } else {\n      return <YearlyCells day={day}>{children}</YearlyCells>;\n    }\n  };\n\n  return (\n    <div className={classes.cell} style={{ borderColor: lineColor }}>\n      <GenericCells />\n    </div>\n  );\n};\n\nexport default Cells;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, IconButton, Typography } from \"@mui/material\";\nimport ArrowBackIosNewIcon from \"@mui/icons-material/ArrowBackIosNew\";\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\nimport { addMonths, addYears, format, subMonths } from \"date-fns\";\nimport subYears from \"date-fns/subYears\";\nimport { CalendarContext, CalendarFormat } from \"..\";\nimport { useStyles } from \"../style\";\nimport { pt } from \"date-fns/locale\";\nimport * as _ from \"lodash\";\n\nconst Control: React.FC = () => {\n  const { currDate, setCurrDate, formatCal } = useContext(CalendarContext);\n  const [headerTitle, setHeaderTitle] = useState<string>();\n  const classes = useStyles();\n\n  useEffect(() => {\n    if (formatCal === CalendarFormat.MONTHLY) {\n      setHeaderTitle(\n        _.capitalize(format(currDate, \"LLLL yyyy\", { locale: pt }))\n      );\n    } else {\n      setHeaderTitle(currDate.getFullYear().toString());\n    }\n  }, [currDate, formatCal]);\n\n  const GoBack = (): void => {\n    if (formatCal === CalendarFormat.MONTHLY) {\n      setCurrDate(subMonths(currDate, 1));\n    } else {\n      setCurrDate(subYears(currDate, 1));\n    }\n  };\n\n  const GoForward = (): void => {\n    if (formatCal === CalendarFormat.MONTHLY) {\n      setCurrDate(addMonths(currDate, 1));\n    } else {\n      setCurrDate(addYears(currDate, 1));\n    }\n  };\n\n  return (\n    <Grid container>\n      <Grid item xs className={classes.header_back_button}>\n        <IconButton\n          data-testid=\"btn-back\"\n          color=\"primary\"\n          size=\"small\"\n          aria-label=\"back the date for calrndar\"\n          onClick={GoBack}\n        >\n          <ArrowBackIosNewIcon />\n        </IconButton>\n      </Grid>\n      <Grid item xs={7}>\n        <Typography variant=\"h6\" align=\"center\" data-testid=\"HeaderTitle\">\n          {headerTitle}\n        </Typography>\n      </Grid>\n      <Grid item xs className={classes.header_foward_button}>\n        <IconButton\n          data-testid=\"btn-forward\"\n          color=\"primary\"\n          size=\"small\"\n          aria-label=\"forward the date for calendar\"\n          onClick={GoForward}\n        >\n          <ArrowForwardIosIcon />\n        </IconButton>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Control;\n","import { ToggleButton, ToggleButtonGroup } from \"@mui/material\";\nimport React, { useContext } from \"react\";\nimport { CalendarContext, CalendarFormat } from \"..\";\n\nconst ToggleCalendarFormat: React.FC = () => {\n  const { formatCal, setFormatCal } = useContext(CalendarContext);\n\n  const handleFormat = (\n    event: React.MouseEvent<HTMLElement>,\n    newFormat: CalendarFormat\n  ) => {\n    setFormatCal(newFormat);\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        alignItems: \"center\",\n      }}\n    >\n      <ToggleButtonGroup\n        value={formatCal}\n        onChange={handleFormat}\n        exclusive\n        style={{ height: 30 }}\n      >\n        <ToggleButton data-testid=\"toggle-month\" value={CalendarFormat.MONTHLY}>\n          Mês\n        </ToggleButton>\n        <ToggleButton data-testid=\"toggle-year\" value={CalendarFormat.YEARLY}>\n          Ano\n        </ToggleButton>\n      </ToggleButtonGroup>\n    </div>\n  );\n};\n\nexport default ToggleCalendarFormat;\n","import React, { useContext } from \"react\";\nimport { Button, Grid } from \"@mui/material\";\nimport { CalendarContext } from \"..\";\nimport Control from \"./control\";\nimport ToggleCalendarFormat from \"./ToggleCalendarFormat\";\nimport { startOfToday } from \"date-fns\";\n\nconst Header: React.FC = () => {\n  const { width } = useContext(CalendarContext);\n\n  return (\n    <Grid\n      container\n      spacing={1}\n      id={width && width > 450 ? \"normal-header\" : \"mobile-header\"}\n    >\n      {width && width > 450 ? <NormalHeader /> : <MobileHeader />}\n    </Grid>\n  );\n};\n\nconst TodayButton: React.FC = () => {\n  const { setCurrDate } = useContext(CalendarContext);\n\n  const handleClick = (): void => {\n    setCurrDate(startOfToday());\n  };\n\n  return (\n    <Button\n      data-testid=\"btn-today\"\n      variant=\"outlined\"\n      onClick={handleClick}\n      style={{ height: 30 }}\n    >\n      Hoje\n    </Button>\n  );\n};\n\nconst NormalHeader: React.FC = () => (\n  <>\n    <Grid item xs>\n      <TodayButton />\n    </Grid>\n    <Grid item xs />\n    <Grid item xs={6}>\n      <Control />\n    </Grid>\n    <Grid item xs />\n    <Grid item xs>\n      <ToggleCalendarFormat />\n    </Grid>\n  </>\n);\n\nconst MobileHeader: React.FC = () => (\n  <>\n    <Grid item xs={12}>\n      <Control />\n    </Grid>\n    <Grid item xs>\n      <TodayButton />\n    </Grid>\n    <Grid item xs>\n      <ToggleCalendarFormat />\n    </Grid>\n  </>\n);\n\nexport default Header;\n","/* eslint-disable new-cap */\nimport React, { ReactNode, useEffect, useState } from \"react\";\nimport { useStyles } from \"../style\";\n\ninterface Props {\n  header: Array<ReactNode>;\n  lineColor?: string;\n  data: Array<ReactNode>;\n  sameWidthP100: string | undefined;\n}\n\nconst TabData: React.FC<Props> = (props: Props) => {\n  const { header, lineColor, data, sameWidthP100 } = props;\n  const classes = useStyles();\n  const NCol = () => header.length;\n  const [lineKey, setLineKey] = useState<Array<number>>(\n    Array.from(Array(NCol()).keys())\n  );\n\n  useEffect(() => {\n    const col = NCol();\n    if (col > 0) {\n      setLineKey(Array.from(Array(col).keys()));\n    }\n  }, [header.length]);\n\n  return (\n    <>\n      {lineKey?.map((i) => (\n        <tbody key={`tab_tbodylin_${i}`}>\n          <tr key={`tab_lin_${i}`}>\n            {data\n              .filter(\n                (value, index) =>\n                  index >= i * NCol() && index < (i + 1) * NCol()\n              )\n              ?.map((item, index) => (\n                <td\n                  className={classes.table_cell}\n                  style={{ width: sameWidthP100, borderColor: lineColor }}\n                  key={`tab_cell_l${i}_${index}`}\n                >\n                  {item}\n                </td>\n              ))}\n          </tr>\n        </tbody>\n      ))}\n    </>\n  );\n};\n\nexport default TabData;\n","/* eslint-disable new-cap */\nimport React, { ReactNode } from \"react\";\nimport { useStyles } from \"../style\";\n\ninterface Props {\n  header: Array<ReactNode>;\n  lineColor?: string;\n  sameWidthP100: string | undefined;\n}\n\nconst TabHeader: React.FC<Props> = (props: Props) => {\n  const { header, lineColor, sameWidthP100 } = props;\n  const classes = useStyles();\n\n  return (\n    <tbody>\n      <tr>\n        {header.map((item, index) => (\n          <th\n            className={classes.table_cell}\n            style={{ width: sameWidthP100, borderColor: lineColor }}\n            key={`tab_hdr_${index}`}\n          >\n            {item}\n          </th>\n        ))}\n      </tr>\n    </tbody>\n  );\n};\n\nexport default TabHeader;\n","/* eslint-disable new-cap */\nimport React, { ReactNode } from \"react\";\nimport { useStyles } from \"../style\";\nimport TabData from \"./TabData\";\nimport TabHeader from \"./TabHeader\";\n\ninterface TableProps {\n  className?: string;\n  children: ReactNode;\n}\nconst MyTable: React.FC<TableProps> = (props: TableProps) => {\n  const { children } = props;\n  return <table {...props}>{children}</table>;\n};\n\ninterface Props {\n  header: Array<ReactNode>;\n  data: Array<ReactNode>;\n  lineColor?: string;\n  sameWidthP100: string | undefined;\n}\n\nconst TableCalendar2: React.FC<Props> = (props: Props) => {\n  const { header, data, lineColor, sameWidthP100 } = props;\n  const classes = useStyles();\n\n  return (\n    <MyTable className={classes.table}>\n      <TabHeader\n        header={header}\n        lineColor={lineColor}\n        sameWidthP100={sameWidthP100}\n      />\n      <TabData header={header} data={data} sameWidthP100={sameWidthP100} />\n    </MyTable>\n  );\n};\n\nexport default TableCalendar2;\n","/* eslint-disable new-cap */\n/* eslint-disable react/jsx-key */\nimport React, { useContext } from \"react\";\nimport { CalendarContext } from \".\";\nimport TableCalendar2 from \"./table2\";\n\nconst Monthly: React.FC = () => {\n  const { headerArray, dataArray, sameWidthP100 } = useContext(CalendarContext);\n\n  return (\n    <TableCalendar2\n      header={headerArray}\n      data={dataArray}\n      sameWidthP100={sameWidthP100}\n    />\n  );\n  // return <TableMe header={headerArray} data={dataArray} />;\n};\n\nexport default Monthly;\n","/* eslint-disable react/jsx-key */\nimport React, { useContext } from \"react\";\nimport { CalendarContext } from \".\";\nimport TableCalendar2 from \"./table2\";\n\nconst Yearly: React.FC = () => {\n  const { sameWidthP100, headerArray, dataArray } = useContext(CalendarContext);\n\n  return (\n    <TableCalendar2\n      header={headerArray}\n      data={dataArray}\n      sameWidthP100={sameWidthP100}\n    />\n  );\n};\n\nexport default Yearly;\n","import React from \"react\";\nimport { Button } from \"@mui/material\";\nimport Calendar from \"./components/calendar\";\n\n/**\n * Initial Class\n * @return {React.FC} Render the page.\n */\nconst App: React.FC = () => (\n  <div>\n    <h1>Header</h1>\n    <Calendar\n      language=\"pt-BR\"\n      holidays={[\n        {\n          day: new Date(2021, 10, 7),\n          title: \"Meu Feriado\",\n          yearly: false,\n        },\n        { day: new Date(1984, 11, 25), title: \"Natal\", yearly: true },\n        { day: new Date(1984, 0, 1), title: \"Ano Novo\", yearly: true },\n      ]}\n    />\n    <h1>Footer</h1>\n    <Button variant=\"contained\">Enter</Button>\n  </div>\n);\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}