{"version":3,"sources":["components/calendar/index.tsx","components/calendar/style.ts","components/calendar/header/control.tsx","components/calendar/header/ToggleCalendarFormat.tsx","components/calendar/header/index.tsx","components/calendar/table.tsx","components/calendar/cells/index.tsx","components/calendar/monthly.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CalendarFormat","useStyles","makeStyles","headercell","border","borderWidth","minHeight","cell","header_back_button","display","justifyContent","header_foward_button","Control","useContext","CalendarContext","currentDate","setCurrDate","formatCal","useState","headerTitle","setHeaderTitle","classes","useEffect","MONTHLY","_","format","locale","pt","getFullYear","toString","Grid","container","item","xs","className","IconButton","color","size","onClick","subMonths","subYears","Typography","variant","align","addMonths","addYears","ToggleCalendarFormat","setFormatCal","style","alignItems","ToggleButtonGroup","value","onChange","event","newFormat","exclusive","height","ToggleButton","YEARLY","TodayButton","Button","startOfToday","NormalHeader","MobileHeader","Header","props","id","width","spacing","Table","header","data","lineColor","ncols","length","line","Array","lines","push","map","index","borderColor","Cells","children","day","backgroundColor","isSameDay","getDay","padding","getMonth","getDate","Monthly","language","daysArray","initCal","startOfDay","startOfWeek","endCal","endOfWeek","i","differenceInDays","shortWeekname","toLocaleDateString","weekday","slice","longWeekname","split","addDays","getWeekName","dataArray","startOfMonth","endOfMonth","getDays","initialContext","Date","undefined","createContext","Calendar","ref","useRef","currDate","setWidth","calendarContext","handleResize","current","clientWidth","window","addEventListener","Provider","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9fc6ecdb.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-empty-function */\nimport { Grid } from \"@mui/material\";\nimport React, { createContext, useEffect, useRef, useState } from \"react\";\nimport Header from \"./header\";\nimport Monthly from \"./monthly\";\n\nexport enum CalendarFormat {\n  MONTHLY,\n  YEARLY,\n}\n\ninterface ICalendarContext {\n  currentDate: Date;\n  setCurrDate: React.Dispatch<React.SetStateAction<Date>>;\n  width: number | undefined;\n  setFormatCal: React.Dispatch<React.SetStateAction<CalendarFormat>>;\n  formatCal: CalendarFormat;\n  language: string;\n}\n\nconst initialContext: ICalendarContext = {\n  currentDate: new Date(),\n  setCurrDate: () => {},\n  width: undefined,\n  setFormatCal: () => {},\n  formatCal: CalendarFormat.MONTHLY,\n  language: \"\",\n};\n\nexport const CalendarContext = createContext<ICalendarContext>(initialContext);\n\ninterface Props {\n  id?: string;\n  language: string;\n}\n\nconst Calendar: React.FC<Props> = (props: Props) => {\n  const { id, language } = props;\n  const ref = useRef<HTMLDivElement>(null);\n  const [currDate, setCurrDate] = useState<Date>(new Date());\n  const [width, setWidth] = useState<number | undefined>(undefined);\n  const [formatCal, setFormatCal] = useState<CalendarFormat>(\n    CalendarFormat.MONTHLY\n  );\n\n  const calendarContext: ICalendarContext = {\n    currentDate: currDate,\n    setCurrDate: setCurrDate,\n    width,\n    setFormatCal,\n    formatCal,\n    language,\n  };\n\n  const handleResize = () => {\n    setWidth(ref.current?.clientWidth);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize, false);\n    handleResize();\n  });\n\n  return (\n    <CalendarContext.Provider value={calendarContext}>\n      <Grid container spacing={1} id={id} ref={ref}>\n        <Grid item xs={12}>\n          <Header />\n        </Grid>\n        <Grid item xs={12}>\n          <Monthly id={\"monthly\"} />\n        </Grid>\n      </Grid>\n    </CalendarContext.Provider>\n  );\n};\n\nexport default Calendar;\n","import { makeStyles } from \"@material-ui/styles\";\n\nexport const useStyles = makeStyles({\n  headercell: {\n    border: \"solid\",\n    borderWidth: 1,\n    minHeight: 24,\n  },\n  cell: {\n    border: \"solid\",\n    borderWidth: \"0.01px\",\n  },\n  header_back_button: {\n    display: \"flex\",\n    justifyContent: \"end\",\n  },\n  header_foward_button: {\n    display: \"flex\",\n    justifyContent: \"start\",\n  },\n});\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, IconButton, Typography } from \"@mui/material\";\nimport ArrowBackIosNewIcon from \"@mui/icons-material/ArrowBackIosNew\";\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\nimport { addMonths, addYears, format, subMonths } from \"date-fns\";\nimport subYears from \"date-fns/subYears\";\nimport { CalendarContext, CalendarFormat } from \"..\";\nimport { useStyles } from \"../style\";\nimport { pt } from \"date-fns/locale\";\nimport * as _ from \"lodash\";\n\nconst Control: React.FC = () => {\n  const { currentDate, setCurrDate, formatCal } = useContext(CalendarContext);\n  const [headerTitle, setHeaderTitle] = useState<string>();\n  const classes = useStyles();\n\n  useEffect(() => {\n    if (formatCal === CalendarFormat.MONTHLY) {\n      setHeaderTitle(\n        _.capitalize(format(currentDate, \"LLLL yyyy\", { locale: pt }))\n      );\n    } else {\n      setHeaderTitle(currentDate.getFullYear().toString());\n    }\n  }, [currentDate, formatCal]);\n\n  const GoBack = (): void => {\n    if (formatCal === CalendarFormat.MONTHLY) {\n      setCurrDate(subMonths(currentDate, 1));\n    } else {\n      setCurrDate(subYears(currentDate, 1));\n    }\n  };\n\n  const GoForward = (): void => {\n    if (formatCal === CalendarFormat.MONTHLY) {\n      setCurrDate(addMonths(currentDate, 1));\n    } else {\n      setCurrDate(addYears(currentDate, 1));\n    }\n  };\n\n  return (\n    <Grid container>\n      <Grid item xs className={classes.header_back_button}>\n        <IconButton\n          color=\"primary\"\n          size=\"small\"\n          aria-label=\"back the date for calrndar\"\n          onClick={GoBack}\n        >\n          <ArrowBackIosNewIcon />\n        </IconButton>\n      </Grid>\n      <Grid item xs={7}>\n        <Typography variant=\"h6\" align=\"center\">\n          {headerTitle}\n        </Typography>\n      </Grid>\n      <Grid item xs className={classes.header_foward_button}>\n        <IconButton\n          color=\"primary\"\n          size=\"small\"\n          aria-label=\"forward the date for calendar\"\n          onClick={GoForward}\n        >\n          <ArrowForwardIosIcon />\n        </IconButton>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Control;\n","import { ToggleButton, ToggleButtonGroup } from \"@mui/material\";\nimport React, { useContext } from \"react\";\nimport { CalendarContext, CalendarFormat } from \"..\";\n\nconst ToggleCalendarFormat: React.FC = () => {\n  const { formatCal, setFormatCal } = useContext(CalendarContext);\n\n  const handleFormat = (\n    event: React.MouseEvent<HTMLElement>,\n    newFormat: CalendarFormat\n  ) => {\n    setFormatCal(newFormat);\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        alignItems: \"center\",\n      }}\n    >\n      <ToggleButtonGroup\n        value={formatCal}\n        onChange={handleFormat}\n        exclusive\n        style={{ height: 30 }}\n      >\n        <ToggleButton value={CalendarFormat.MONTHLY}>Mês</ToggleButton>\n        <ToggleButton value={CalendarFormat.YEARLY}>Ano</ToggleButton>\n      </ToggleButtonGroup>\n    </div>\n  );\n};\n\nexport default ToggleCalendarFormat;\n","import React, { useContext } from \"react\";\nimport { Button, Grid } from \"@mui/material\";\nimport { CalendarContext } from \"..\";\nimport Control from \"./control\";\nimport ToggleCalendarFormat from \"./ToggleCalendarFormat\";\nimport { startOfToday } from \"date-fns\";\n\ninterface Props {\n  id?: string;\n}\n\nconst Header: React.FC<Props> = (props: Props) => {\n  const { id } = props;\n  const { width } = useContext(CalendarContext);\n\n  return (\n    <Grid container spacing={1} id={id}>\n      {width && width > 450 ? <NormalHeader /> : <MobileHeader />}\n    </Grid>\n  );\n};\n\nconst TodayButton: React.FC = () => {\n  const { setCurrDate } = useContext(CalendarContext);\n\n  const handleClick = (): void => {\n    setCurrDate(startOfToday());\n  };\n\n  return (\n    <Button variant=\"outlined\" onClick={handleClick} style={{ height: 30 }}>\n      Hoje\n    </Button>\n  );\n};\n\nconst NormalHeader: React.FC = () => (\n  <>\n    <Grid item xs>\n      <TodayButton />\n    </Grid>\n    <Grid item xs />\n    <Grid item xs={6}>\n      <Control />\n    </Grid>\n    <Grid item xs />\n    <Grid item xs>\n      <ToggleCalendarFormat />\n    </Grid>\n  </>\n);\n\nconst MobileHeader: React.FC = () => (\n  <>\n    <Grid item xs={12}>\n      <Control />\n    </Grid>\n    <Grid item xs>\n      <TodayButton />\n    </Grid>\n    <Grid item xs>\n      <ToggleCalendarFormat />\n    </Grid>\n  </>\n);\n\nexport default Header;\n","import { Grid } from \"@mui/material\";\nimport React, { ReactElement } from \"react\";\nimport { useStyles } from \"./style\";\n\ninterface Props {\n  id?: string;\n  header: Array<ReactElement>;\n  data: Array<ReactElement>;\n  lineColor: string;\n}\n\nconst Table: React.FC<Props> = (props: Props) => {\n  const { id, header, data, lineColor } = props;\n  const classes = useStyles();\n\n  const ncols = header.length;\n  let line: Array<ReactElement> = new Array<ReactElement>();\n  const lines = new Array<ReactElement>();\n\n  while (data.length % ncols !== 0) {\n    data.push(<div />);\n  }\n\n  data.map((item: ReactElement, index: number) => {\n    line.push(\n      <Grid item xs key={`line_${index}`}>\n        <div className={classes.cell} style={{ borderColor: lineColor }}>\n          {item}\n        </div>\n      </Grid>\n    );\n    if (index % ncols === ncols - 1) {\n      lines.push(\n        <Grid container item xs={12} key={`lines_${lines.length}`}>\n          {line}\n        </Grid>\n      );\n      line = new Array<ReactElement>();\n    }\n  });\n\n  const Header = () => (\n    <Grid container item xs={12}>\n      {header.map((item: ReactElement, index: number) => (\n        <Grid item xs key={`header_${index}`}>\n          <div\n            className={classes.headercell}\n            style={{ borderColor: lineColor }}\n          >\n            {item}\n          </div>\n        </Grid>\n      ))}\n    </Grid>\n  );\n\n  return (\n    <Grid container id={id}>\n      <Header />\n      {lines}\n    </Grid>\n  );\n};\n\nexport default Table;\n","import React, { ReactChildren } from \"react\";\nimport { Grid, Typography } from \"@mui/material\";\nimport { isSameDay, startOfToday } from \"date-fns\";\n\ninterface Props {\n  id?: string;\n  children?: ReactChildren;\n  day: Date;\n}\n\nconst Cells: React.FC<Props> = (props: Props) => {\n  const { children, day } = props;\n  const currentDate = startOfToday();\n\n  const colorCells = (): string | undefined => {\n    if (isSameDay(day, currentDate)) {\n      return \"#F8AD63\";\n    }\n    if (day.getDay() === 0 || day.getDay() === 6) {\n      return \"#F7F6F3\";\n    }\n    return undefined;\n  };\n\n  const colorText = (): string | undefined => {\n    if (day.getMonth() !== currentDate.getMonth()) {\n      return \"ThreeDHighlight\";\n    }\n    return \"gray\";\n  };\n\n  return (\n    <Grid container style={{ backgroundColor: colorCells(), minHeight: 50 }}>\n      <Grid item xs={12}>\n        <Typography\n          variant=\"subtitle2\"\n          align=\"right\"\n          color=\"ThreeDHighlight\"\n          style={{ padding: 5, color: colorText() }}\n        >\n          {day.getDate()}\n        </Typography>\n      </Grid>\n      <Grid item xs={12}>\n        {children}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Cells;\n","/* eslint-disable react/jsx-key */\nimport React, { useContext } from \"react\";\nimport { Typography } from \"@mui/material\";\nimport Table from \"./table\";\nimport {\n  addDays,\n  endOfMonth,\n  startOfDay,\n  startOfMonth,\n  startOfWeek,\n} from \"date-fns\";\nimport { differenceInDays, endOfWeek } from \"date-fns/esm\";\nimport Cells from \"./cells\";\nimport { CalendarContext } from \".\";\n\ninterface Props {\n  id?: string;\n}\n\nconst Monthly: React.FC<Props> = (props: Props) => {\n  const { id } = props;\n  const { currentDate, width, language } = useContext(CalendarContext);\n\n  const getDays = () => {\n    const data = new Array<Date>();\n    const initCal = startOfDay(startOfWeek(startOfMonth(currentDate)));\n    const endCal = startOfDay(endOfWeek(endOfMonth(currentDate)));\n\n    let i: Date = initCal;\n    while (differenceInDays(i, endCal) <= 0) {\n      data.push(i);\n      i = addDays(i, 1);\n    }\n    return data;\n  };\n\n  const getWeekName = () => {\n    const data = new Array<string>();\n    const initCal = startOfDay(startOfWeek(currentDate));\n    const endCal = startOfDay(endOfWeek(initCal));\n\n    let i: Date = initCal;\n    while (differenceInDays(i, endCal) <= 0) {\n      const shortWeekname = i\n        .toLocaleDateString(language, {\n          weekday: \"short\",\n        })\n        .slice(0, 3);\n      const longWeekname = i\n        .toLocaleDateString(language, {\n          weekday: \"long\",\n        })\n        .split(\"-\")[0];\n      data.push(width && width > 500 ? longWeekname : shortWeekname);\n      i = addDays(i, 1);\n    }\n    return data;\n  };\n\n  const daysArray = getWeekName().map((item) => (\n    <Typography align=\"center\">{item}</Typography>\n  ));\n  const dataArray = getDays().map((item) => <Cells day={item} />);\n\n  return (\n    <div>\n      {width}\n      <Table\n        id={id}\n        header={daysArray}\n        data={dataArray}\n        lineColor=\"rgb(223 223 222)\"\n      />\n    </div>\n  );\n};\n\nexport default Monthly;\n","import React from \"react\";\nimport { Button } from \"@mui/material\";\nimport Calendar from \"./components/calendar\";\n\n/**\n * Initial Class\n * @return {React.FC} Render the page.\n */\nconst App: React.FC = () => (\n  <div>\n    <h1>Header</h1>\n    <Calendar language=\"pt-BR\" />\n    <h1>Footer</h1>\n    <Button variant=\"contained\">Enter</Button>\n  </div>\n);\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}